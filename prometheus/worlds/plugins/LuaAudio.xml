<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE muclient>
<muclient>

<plugin
   name="Lua_Audio"
   id="aedf0cb0be5bf045860d54b7"
   language="Lua"
   purpose="Test audio plugin for Lua"
   requires="5.00"
  >
</plugin>

<include name="constants.lua"/>

<aliases>
  <alias
   enabled="y"
   match="sound_toggle"
   send_to="12"
   sequence="100"
  >
  <send>
    if (sounds == 0) then
      sounds = 1
      Execute("tts_interrupt Sounds enabled.")
      audio.volume(vol, 0)
      return
    else
      sounds = 0
      Execute("tts_interrupt Sounds disabled.")
      vol = audio.getVolume()
      DoAfterSpecial(0.3, 'Sound("volume=0")', 12)
      return
    end
  </send>
  </alias>
  <alias
   enabled="y"
   match="volume_down"

   send_to="12"
   sequence="100"
  >
  <send>
    if (sounds == 0) then
      Execute("tts_interrupt You're not supposed to use this function while sounds are disabled.")
      return
    end
    if (volume_changed == 1) then
      if (vol == 0) then
        Execute("tts_interrupt Sounds are muted.")
      else
        vol = vol - 5
        SetVariable("vol", vol)
        Sound("volume="..vol.."")
      end
    else
      volume_changed = 1
      if (GetVariable("vol") == nil) then
        vol = 100
        vol = vol - 5
        SetVariable("vol", vol)
        Sound("volume="..vol.."")
      else
        vol = tonumber(GetVariable("vol"))
        if (vol == 0) then
          Execute("tts_interrupt Sounds are muted.")
        else
          vol = vol - 5
          SetVariable("vol", vol)
          Sound("volume="..vol.."")
        end
      end
    end
  </send>
  </alias>
  <alias
   enabled="y"
   match="vol"
   send_to="12"
   sequence="100"
  >
  <send>
    Execute("tts_interrupt "..vol)
    Execute("tts_interrupt "..GetVariable("vol"))
    Execute("tts_interrupt "..sounds)
  </send>
  </alias>
  <alias
   enabled="y"
   match="volume_up"
   send_to="12"
   sequence="100"
  >
  <send>
    if (sounds == 0) then
      Execute("tts_interrupt You're not supposed to use this function while sounds are disabled.")
      return
    end
    if (volume_changed == 1) then
      if (vol &gt;= 100) then
        Execute("tts_interrupt Volume range can't be greater than 100 percent.")
      else
        vol = vol + 5 
        SetVariable("vol", vol)
        Sound("volume="..vol.."")
      end
    else
      volume_changed = 1
      if (GetVariable("vol") == nil) then
        vol = 100
        SetVariable("vol", 100)
        Execute("tts_interrupt Volume range can't be greater than 100 percent.")
      else
        vol = tonumber(GetVariable("vol"))
        if (vol &gt;= 100) then
          Execute("tts_interrupt Volume range can't be greater than 100 percent.")
        else
          vol = vol + 5
          SetVariable("vol", vol)
          Sound("volume="..vol.."")
        end
      end
    end
  </send>
  </alias>
  <alias
   enabled="y"
   match="sound_close"
   send_to="12"
   sequence="100"
  >
  <send>
    audio.free()
  </send>
 </alias>
</aliases>

<script>
<![CDATA[

local ppi = require("ppi")
if (GetVariable("fsounds") == nil) then
  SetVariable("fsounds", 0)
end

Accelerator("Ctrl+F12", "sound_toggle")

function sfreq(freqing)
  freq = split(freqing, "=")
  val = freq[1]
  file = freq[2]
  Sound("freq="..val)
  Sound(file)
end

local function isPlaying(id)
  return audio.isPlaying(id)
end

local function getVolume(id)
  return audio.getVolume(id)
end

function SoundPan(panning)
  pan = split(panning, "=")
  current = tonumber(pan[1])
  max = tonumber(pan[2])
  file = pan[3]
  Sound("pan="..(current*200/max)-100)
  Sound(file)
  Sound("pan=0")
end

function split(str, pat)
  local t = {}  
  local fpat = "(.-)" .. pat
  local last_end = 1
  local s, e, cap = str:find(fpat, 1)
  while s do
    if ((s ~= 1) or (cap ~= "")) then
      table.insert(t,cap)
    end
    last_end = e+1
    s, e, cap = str:find(fpat, last_end)
  end
  if (last_end <= #str) then
    cap = str:sub(last_end)
    table.insert(t, cap)
  end
  return t
end

loops = {}

function OnPluginPlaySound(file)
  if (file == "") then
    audio.stop(0)
    return
  end
  if file:find("=") then
    t = split(file, "=")
    if t[1] == "pan" then
      audio.pan(tonumber(t[2]))
    elseif t[1] == "volume" then
      audio.volume(tonumber(t[2]))
    elseif t[1] == "freq" then
      audio.freq(tonumber(t[2]))
    elseif t[1] == "loop" then
      file = t[2]
      local id = audio.play(file, 1)
      if (id ~= 0) then
        loops[file] = id
      end
    elseif t[1] == "stop" then
      if t[2] == "all" then
        for k,v in pairs(loops) do
          audio.stop(v)
        end
      elseif loops[t[2]] then
        audio.stop(loops[t[2]])
        loops[t[2]] = nil
      end
    end
  else
    id = audio.play(file, 0)
  end
end

function setPan(x, id)
  if (x and id) then
    audio.pan(x, id)
  end
end

function setPitch(x, id)
  if (x and id) then
    audio.pitch(x, id)
  end
end

function setVol(x, id)
  if (x and id) then
    audio.volume(x, id)
  end
end

function slideVol(x, id, time)
  if x and id and time then
    audio.slideVol(x, id, time)
  end
end

function fadeout(id, _time)
  if (id) then
    audio.fadeout(id, _time)
  end
end

function slidePan(x, id, _time)
 if x and id then
   audio.slidePan(x, id, _time)
  end
end

local function slidePitch(x, id, _time)
  if (x and id) then
    audio.slidePitch(x, id, _time)
  end
end

local function stop(id)
  if (id) then
    audio.stop(id)
  end
end

local function playDelay(file, time, pan, vol)
  return audio.playDelay(file, time, pan, vol)
end

local function playDelayLooped(file, time, pan, vol)
  id = audio.playDelayLooped(file, time, pan, vol)
  return id
end

local function playLooped(file)
  id = audio.play(file, 1)
  return id
end

local function play(file, loop, pan, vol)
  id = audio.play(file, loop, pan, vol)
  if (vol ~= nil) then
    if (vol > 100) then 
      vol = 100 
    end
  end
  return id
end

function OnPluginInstall ()
  assert(package.loadlib("audio.dll", "luaopen_audio"))()
  if not (GetVariable("vol") == nil) then
    vol = tonumber(GetVariable("vol"))
    Sound("volume="..vol.."")
  else
    vol = 100
    Sound("volume=100")
    SetVariable("vol", "100")
  end
end

function OnPluginClose()
  if (#GetWorldList() == 1) then
    audio.free()
  end
end

ppi.Expose("init", OnPluginInstall)
ppi.Expose("unload", OnPluginClose)
ppi.Expose("setPitch", setPitch)
ppi.Expose("slidePitch", slidePitch)

ppi.Expose("isPlaying", isPlaying)
ppi.Expose("getVolume", getVolume)

ppi.Expose("stop", stop)
ppi.Expose("setPan", setPan)
ppi.Expose("play", play)
ppi.Expose("playDelay", playDelay)
ppi.Expose("playDelayLooped", playDelayLooped)
ppi.Expose("setVol", setVol)
ppi.Expose("slideVol", slideVol)
ppi.Expose("fadeout", fadeout)
ppi.Expose("slidePan", slidePan)
ppi.Expose("playLooped", playLooped)

]]>            
</script> 

</muclient>
