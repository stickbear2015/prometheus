<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
<plugin
   name="channel_history"
   author="Rafael Natan"
   id="6000a4c6f0e71d31fecf523d"
   language="Lua"
   purpose="Allows reading of messages sorted into categories with hotkeys"
   date_written="2020-12-09 15:14:12"
   requires="5.06"
   version="2.5"
    save_state="y">
<description trim="y">
<![CDATA[
The only alias you should need is history_add. Its syntax is:
history_add category=message
history_save_limit - when typed with nothing after, this opens a dialog which let's you set the limit for the save messages feature. You can also provide a number after to set that directly without opening the dialog.
Accelerator keys:
alt+right and alt+left - next and previous category buffer
shift+alt+right and left  - move buffer.
alt + shift + Delete - delete a buffer.
alt+1 through alt+0 - read 1st to 10th latest message in buffer. pressing one of these keys twice within 0.5 seconds will copy the message to the clipboard, and 3 times will paste it into the command window.
alt+shift+1-0: jump to first through tenth buffer
Alt + shift + ` (grave accent)( also works without shift) - If you have some text typed in the command window, try to jump to a buffer starting with that text. Press the command with the window empty to return to where you were before the last jump. Effectively it lets you flip between two buffers this way.
Alt+up or Alt+ Down Arrow - move through messages in the current buffer. The latest messages are at the bottom of the buffer.
Alt + Pageup or Alt + PageDown - move up or down 10 messages in the current buffer.
Alt + Home or Alt + End - Move up or down 2000 messages in the current buffer
Alt + Space - Repeat currently selected buffer item
Alt + Shift + Space - Copy selected buffer item to clipboard
Alt + Enter - Open URLs in the current buffer item if any, otherwise open the world configuration dialog
Alt + Shift + Enter - Copy all items in current buffer to an output window
Alt + Backslash: If you have some text typed in the command window, searches toward the bottom of the current buffer for that text. Add shift to search toward the top of the buffer. If a match is found, focus jumps to that message.
Alt + Shift + T - Toggle hearing a relative time announcement after each message, such as 2 minutes ago.
Alt + shift + i - Opens a dialog box which let's you select categories to ignore (and vice versa). Handy if you don't care about messages from a certain category.
Alt + shift + s - toggle saving of the last 100 messages in each buffer. These will be reloaded and available when the client starts back up or the plugin is reinstalled. The limit is configurable (see history_save_limit alias).
]]>
</description>
</plugin>

<!--  Get our standard constants -->
<include name="constants.lua"/>

<aliases>

  <alias script="history_delete" match="^history_delete" enabled="y" omit_from_command_history="y"
    omit_from_log="y" regexp="y" omit_from_output="y" sequence="100"> </alias>
  <alias match="help channel_history" enabled="y" send_to="12">
    <send> Note(GetPluginInfo(GetPluginID(), 3)) </send>
  </alias>

  <alias script="category_move" match="^history_move (\w+)" enabled="y" omit_from_command_history="y" omit_from_log="y"
    regexp="y" omit_from_output="y" sequence="100"> </alias>

  <alias script="history_add" match="^history_add (\w[\w ]*)=(.*)" enabled="y" omit_from_command_history="y" omit_from_log="y"
    regexp="y" omit_from_output="y" sequence="100"> </alias>
  <alias
   script="ttstoggle"
   match="config tts"
   enabled="y"
   omit_from_command_history="y"
keep_evaluating="y"
   omit_from_log="y"
   regexp="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>
  <alias
   script="history_get"
   match="^history_get (\d+)$"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   regexp="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>
  <alias
   script="history_link"
   match="^history_get_link"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   regexp="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>
  <alias
   script="history_catjump"
   match="^history_catjump (\d+)$"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   regexp="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>
  <alias
   script="history_catsearch"
   match="history_catsearch"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>
  <alias
   script="history_catprev"
   match="history_catprev"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>
  <alias
   script="history_catnext"
   match="history_catnext"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>
  <alias
   script="history_msgprev"
   match="^history_msgprev (\d+)$"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </alias>
  <alias
   script="history_msgnext"
   match="^history_msgnext (\d+)$"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </alias>
  <alias
   script="history_msgcopy"
   match="history_msgcopy"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>
  <alias
   script="history_notepad"
   match="history_notepad"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>
  <alias
   match="^(|history\_)timestamps?$"
   enabled="y"
   regexp="y"
   send_to="12"
   ignore_case="y"
   sequence="100"
  >
  <send>if timestamps==true then
timestamps=false
SetVariable("timestamps", "false")
Execute("tts_interrupt Timestamps will no longer be spoken after messages.")
else
timestamps=true
SetVariable("timestamps", "true")
Execute("tts_interrupt You will now hear an approximate time after every message.")
end</send>
  </alias>
  <alias
   script="configure_ignored_categories"
   match="^configure_history_ignores$"
   enabled="y"
   regexp="y"
   sequence="100"
  >
  </alias>
  <alias
   script="toggle_save_history"
   match="^toggle_save_history$"
   enabled="y"
   regexp="y"
   sequence="100"
  >
  </alias>
  <alias
   match="^history_save_limit\s*(?P&lt;limit&gt;\d+)?$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>-- Allows a user to change how many messages get saved for all buffers when that feature is enabled.
local limitstr = "%&lt;limit&gt;"
local limit
if limitstr == "" then
  limitstr = utils.inputbox("Enter the number of messages to save for each buffer.", "Set history save limit", GetVariable("save_limit"))
  limit = tonumber(limitstr)
  if limit == nil then
    return utils.msgbox("'" .. limitstr .. "' is not a number.", "Invalid save limit")
  elseif limit > buffer_capacity then
    utils.msgbox("Your chosen save limit of " .. limitstr .. " is over the buffer capacity. Only the last " .. buffer_capacity .. " messages will be saved.", "Limit over buffer capacity")
  end
else
  limit = tonumber(limitstr)
  if limit == nil then
    return Note("Invalid save limit: '" .. limitstr .. " is not a number.")
  elseif limit > buffer_capacity then
    -- Won't hurt anything, as saving messages has a sanity check. Tell them all the same.
    Note("That limit is higher than buffer capacity.")
  end
end
SetVariable("save_limit", tostring(limit))
Note("History save limit set to " .. tostring(limit) .. " messages")</send>
  </alias>
</aliases>

<script><![CDATA[
buffer_capacity = 100000 -- How many messages can buffers hold before deleting the oldest every time a new one is added.
default_save_limit = "100" -- If enabled, save this many of the latest messages and reload them when the plugin is reinstalled or the client is reopened.
default_save_messages = "false" -- Do we save n of the last messages in each buffer by default?
modes = {} -- for keyboard states
messages = {}
indices = {} -- Stores the user's position in each buffer.
current_category = 0
prev_category=0 --for jump
current_search=0 --for search
categories = {} -- list-array containing the names of categories, also acts as their orderings.
ignored_categories = {}
if not GetVariable("timestamps") then
  timestamps=true
  SetVariable("timestamps", "true")
elseif GetVariable("timestamps") == "false" then
  timestamps=false
  Note("Channel history timestamps are disabled.")
else
  timestamps=true
  Note("Channel history timestamps are enabled.")
end
if not GetVariable("save_limit") then
  SetVariable("save_limit", default_save_limit)
end
if not GetVariable("save_messages") then
  SetVariable("save_messages", default_save_messages)
end

-- set up accelerators
for i = 1, 9 do
  Accelerator("alt + " .. i, "history_get " .. i)
  Accelerator("alt + shift + " .. i, "history_catjump " .. i)
end
Accelerator("alt + 0", "history_get 10") -- 10 is a special case
Accelerator("alt + shift + 0", "history_catjump 10") -- 10 is a special case
Accelerator("alt + right", "history_catnext")
Accelerator("alt + left", "history_catprev")
Accelerator("alt + down", "history_msgnext 1")
Accelerator("alt + up", "history_msgprev 1")
Accelerator("alt + pagedown", "history_msgnext 10")
Accelerator("alt + pageup", "history_msgprev 10")
Accelerator("alt + end", "history_msgnext 2000")
Accelerator("alt + home", "history_msgprev 2000")
Accelerator("shift+alt + right", "history_move right")
Accelerator("shift+alt + left", "history_move left")
Accelerator("alt+shift+delete","history_delete")
Accelerator("alt + space", "history_msgprev 0")
Accelerator("alt+shift+space","history_msgcopy")
Accelerator("alt+shift+enter","history_notepad")
Accelerator("alt+enter","history_get_link")
Accelerator("alt+shift+t","timestamps")
Accelerator("alt+shift+i", "configure_history_ignores")
Accelerator("alt+shift+s", "toggle_save_history")
AcceleratorTo("alt+\\","history_find(1)",12)
AcceleratorTo("alt+shift+\\","history_find(0)",12)
Accelerator("alt+shift+`","history_catsearch")
Accelerator("alt+`","history_catsearch")

local serialize = require("serialize")
function OnPluginSaveState()
  if categories == nil then
    categories = {}
  end
  SetVariable("categories", serialize.save("categories"))
  local ic = {}
  SetVariable("ignored_categories", serialize.save("ignored_categories"))
  SetVariable("current_category", tostring(current_category))
  -- If we're supposed to save the last n messages in all buffers, do so.
  if GetVariable("save_messages") == "true" and GetVariable("save_limit") ~= nil then
    local save_limit = tonumber(GetVariable("save_limit"))
    local saved_messages = {}
    for i, cname in ipairs(categories) do
      if #messages[cname] > 0 then
        saved_messages[cname] = {}
        local start_index = #messages[cname] - save_limit + 1
        if start_index < 1 then start_index = 1 end
        for i=start_index, #messages[cname] do
          local m = messages[cname][i]
          -- Set the time of each message to a unix timestamp, instead of one relative to process-start.
          time = os.time() - (os.clock() - m.time)
          table.insert(saved_messages[cname], {["message"] = m.message, ["time"] = time})
        end
      end -- if buffer has messages
    end -- loop through each category buffer
    data = serialize.save("saved_messages", saved_messages)
    SetVariable("saved_messages", data)
  end -- if we save messages.
end
function OnPluginInstall()
  SetVariable("tts","1")
  local saved_categories = GetVariable("categories")
  if saved_categories ~= nil then
    loadstring(saved_categories)()
  end
  local saved_current_category = GetVariable("current_category")
  if saved_current_category ~= nil then
    current_category = tonumber(saved_current_category)
  end
  local saved_ignored_categories = GetVariable("ignored_categories")
  if saved_ignored_categories ~= nil then
    loadstring(saved_ignored_categories)()
  end
  -- Set up tables for messages and each buffer's current index
  for i, name in ipairs(categories) do
    messages[name] = {}
    indices[name] = 0
  end
  -- Load saved messages into buffers if this is enabled.
  if GetVariable("save_messages") == "true" then
    local serialized_msgs = GetVariable("saved_messages")
    if serialized_msgs then
      local client_start_time = os.time() - os.clock()
      loadstring(serialized_msgs)()
      local count = 0
      for buffer, msgs in pairs(saved_messages) do
        for _, m_data in ipairs(msgs) do
          --table.insert(messages[buffer], msgs)
          time = m_data.time - client_start_time
          table.insert(messages[buffer], {["message"] = m_data.message, ["time"] = time})
          count = count + 1
        end
      end
      --Note(count .. " messages loaded!")
    end
  end
end

function history_delete(n,l,w)
  if categories == nil then
    say("no categories")
    return
  end
  if current_category == 0 then
    say("No category selected.")
    return
  end
  messages [categories [current_category] ] = nil
  indices [categories [current_category] ] = nil
  table.remove(categories, current_category)
  if current_category > #categories then
    current_category = 1
  end
  if #categories > 0 then
    say(categories[current_category])
  else
    say("no more categories.")
    -- Prevent other code from crashing:
    categories = { }
    current_category = 0
  end
end

function category_move(name, line, w)
  if categories == nil then
    say("no categories")
    return
  end
  if current_category == 0 then
    say("No category selected.")
    return
  end
  name = categories[current_category]
  table.remove(categories,current_category)
  if w[1]=="right" then
    current_category = current_category + 1
    if current_category > #categories + 1 then
      current_category = 2
    end
  else
    current_category = current_category - 1
    if current_category < 1 then
      current_category = #categories
    end
  end
  table.insert(categories, current_category, name)
  say("moved.")
  SaveState()
end

function ttstoggle(n,l,w)
  SetVariable("tts",GetPluginVariable("553a883096da345ce6897740","tts"))
end

function history_add(name, line, wc)
  if categories == nil then
    categories = {}
  end
  local cat, msg = wc[1], wc[2]
  if ignored_categories[cat] ~= nil then
    return -- we ignore messages in this category
  end
  if messages[cat] == nil then
    messages[cat] = {}
    indices[cat] = 0
    table.insert(categories, cat)
  end
  table.insert(messages[cat], {["message"]=msg,["time"]=os.clock()})
  -- if adding this message will go over our buffer capacity, remove the oldest one
  if #messages[cat] > buffer_capacity then
    table.remove(messages[cat], 1)
    if indices[cat] > 1 then
      indices[cat] = indices[cat] - 1
    end
  end
end

-- helper function to say stuff
function say(x) 
 if(GetVariable("tts")=="1") then
  Execute("tts_interrupt " .. x)
 else
  Note(x)
 end
end

function history_get(name, line, wc)
  local str = ""
  if current_category == 0 and next(categories) == nil then
    say("No categories")
    return
  elseif current_category == 0 and #categories > 0 then
    for i, result in ipairs(categories) do
      if categories[i] == "all" then
        current_category = i
      end
    end
    if current_category > 0 then
      str = str .. "switching to all."
    else
      str = str .. "switching to " .. categories[1] .. ". Use alt left and right arrows to change."
      current_category = 1
    end
  end
  local item = tonumber(wc[1])
  if #messages[categories[current_category]] < item then
    say("no message")
    return
  end

 -- now that all that's out of the way, we can start our real code which should always succeed.
  local timeout = 0.5 -- in seconds
  if modes[item] == nil then
    modes[item] = {os.clock(), 1}
  elseif os.clock()-modes[item][1] >= timeout then
    modes[item][1] = os.clock()
    modes[item][2] = 1
  else
    modes[item][1] = os.clock()
    modes[item][2] = modes[item][2] + 1
  end
  if modes[item][2] > 3 then
    modes[item][2] = 3
  end

  local real_item = #messages[categories[current_category]] + 1 - item
  if modes[item][2] == 1 then -- speak
    sayMsg(str, messages[categories[current_category]][real_item])
  elseif modes[item][2] == 2 then -- copy
    SetClipboard(messages[categories[current_category]][real_item]["message"])
    say("copied")
  elseif modes[item][2] == 3 then -- paste
    PasteCommand(messages[categories[current_category]][real_item]["message"])
    say("pasted")
  end
end

function history_catjump(name, line, wc)
  local cat = tonumber(wc[1])
  if #categories == 0 then
    say("No categories")
    return
  elseif #categories < cat then
    say("That category doesn't exist yet.")
    return
  end
  current_category = cat
  if #messages[categories[current_category]] > 0 and indices[categories[current_category]]==0 then indices[categories[current_category]]=1 end
  say(categories[current_category] ..": "..indices[categories[current_category]] .. " of " .. #messages[categories[current_category]])
end

function sayMsg(str,m)
  saythis=str .. " " .. m["message"]
  if timestamps==true then
    local lastchar=string.byte(m["message"]:sub(-1))
    if (lastchar>=49 and lastchar<=57) or (lastchar>=65 and lastchar<=91) or (lastchar>=97 and lastchar<=123) then
      saythis=saythis.."."
    end
    saythis=saythis.." "..calculateRelativeTime(os.clock()-m["time"])
  end
  say(saythis)
end

function calculateRelativeTime(t)
  if t<1 then
    return "just now"
  end
  if t>=1 and t<60 then
    return math.ceil(t).." seconds ago"
  end
  if t>=60 and t<3600 then
    local min=math.floor(t/60)
    local sec=math.ceil(math.fmod(t,60))
    return min.." minutes "..sec.." seconds ago"
  end
  if t>=3600 and t<86400 then -- amount of seconds in a day.
    local hr=math.floor(t/3600)
    local min=math.floor((t%3600)/60)
    return hr.." hours "..min.." minutes ago"
  end
  if t>86400 then
    local days=math.floor(t/86400)
    local hr=math.floor((t-(86400*days))/3600)
    local min=math.floor(((t-((86400*days)+(3600*hr)))/60))
    return days.." days, "..hr.." hours, and "..min.." minutes ago"
  end
  return ""
end

function history_catnext(name, line, wc)
  if categories == nil or next(categories) == nil then
    say("no categories")
    return
  end
  current_category = current_category + 1
  if current_category > #categories then
    current_category = 1
  end
  if indices[categories[current_category]]==0 then indices[categories[current_category]]=1 end
  if #messages[categories[current_category]] == 0 then
    -- This buffer is empty.
    pos_or_status = "empty"
  else
    pos_or_status = indices[categories[current_category]] .. " of " .. #messages[categories[current_category]]
  end
  say(categories[current_category] ..": " .. pos_or_status)
end

function history_catprev(name, line, wc)
  if categories == nil or next(categories) == nil then
    say("no categories")
    return
  end
  current_category = current_category - 1
  if current_category < 1 then
    current_category = #categories
  end
  if indices[categories[current_category]]==0 then 
    indices[categories[current_category]]=1 
  end
  if #messages[categories[current_category]] == 0 then
    -- This buffer is empty.
    pos_or_status = "empty"
  else
    pos_or_status = indices[categories[current_category]] .. " of " .. #messages[categories[current_category]]
  end
  say(categories[current_category] ..": " .. pos_or_status)
end

function history_msgnext(name, line, wc)
 local skip = tonumber(wc[1])
 local str = ""
 if categories == nil then
  say("no categories")
  return
 end
 if current_category == 0 then
  say("No category selected.")
  return
 end
 if #messages[categories[current_category]] == 0 then
  return say("Empty.")
 end
 if indices[categories[current_category]] == 0 then
  indices[categories[current_category]] = #messages[categories[current_category]]
 end
 if indices[categories[current_category]] + skip > #messages[categories[current_category]] then
  indices[categories[current_category]] = #messages[categories[current_category]]
  str = str .. "Bottom: "
 else
  indices[categories[current_category]] = indices[categories[current_category]] + skip
 end
 sayMsg(str, messages[categories[current_category]][indices[categories[current_category]]])
end

function history_msgprev(name, line, wc)
 local skip = tonumber(wc[1])
 local str = ""
 if categories == nil then
  say("no categories")
  return
 end
 if current_category == 0 then
  say("No category selected.")
  return
 end
 if #messages[categories[current_category]] == 0 then
  return say("Empty.")
 end
 if indices[categories[current_category]] == 0 then
  indices[categories[current_category]] = #messages[categories[current_category]]
 end
 if indices[categories[current_category]] - skip < 1 then
  indices[categories[current_category]] = 1
  str = str .. "Top: "
 else
  indices[categories[current_category]] = indices[categories[current_category]] - skip
 end
 sayMsg(str, messages[categories[current_category]][indices[categories[current_category]]])
end

function history_link(name, line, wc)
 if categories == nil then
  say("no categories")
  say("opening world configuration")
  DoAfterSpecial(0.5,"DoCommand('preferences')",12)
  return
 end -- if
  
 if current_category == 0 then
  say("No category selected.")
  say("opening world configuration")
  DoAfterSpecial(0.5,"DoCommand('preferences')",12)
  return
 end -- if
 
 if indices[categories[current_category]] == 0 then
  indices[categories[current_category]] = #messages[categories[current_category]]
 end -- if
 
 local hmm=(messages[categories[current_category]][indices[categories[current_category]]]["message"])
  links={}
  re=rex.new("(http|ftp|https)://([\\w_-]+(?:(?:\\.[\\w_-]+)+))([\\w.,@?^=%:/~+#-]*[\\w@?^=%/~+#-])?")
 n=re:gmatch(hmm,function(m, t)
  table.insert(links,m)
 end)
 
 if #links==0 then
  say("no links, opening world configuration")
  DoAfterSpecial(0.5,"DoCommand('preferences')",12)
 end -- if
 
 if #links==1 then
  say("Opening URL: "..links[1])
  OpenBrowser(links[1])
 end -- if
 
 if #links>1 then
  url=utils.listbox("","Select URL",links,1)
  if url then
   OpenBrowser(links[url])
  end -- if
 end -- if
end -- function

function history_msgcopy(name, line, wc)
 if categories == nil then
  say("no categories")
  return
 end
 if current_category == 0 then
  say("No category selected.")
  return
 end
 if indices[categories[current_category]] == 0 then
  indices[categories[current_category]] = #messages[categories[current_category]]
 end
 SetClipboard(messages[categories[current_category]][indices[categories[current_category]]]["message"])
 say("copied")
end

function history_notepad()
if categories == nil then
say("no categories")
return
end
if current_category == 0 then
say("No category selected.")
return
end
np = categories[current_category]
local nptext="Showing "..#messages[categories[current_category]].." messages:\r\n"
for i = 1, #messages[categories[current_category]] do
if timestamps==true then
nptext = nptext.. "[" .. os.date("%c", (os.time()-os.clock()+messages[categories[current_category]][i]["time"])) .. "] " .. messages[categories[current_category]][i]["message"].."\r\n"
else
nptext = nptext..messages[categories[current_category]][i]["message"].."\r\n"
end
end
SendToNotepad(np, nptext)
 NotepadReadOnly(np, true)
 ActivateNotepad(np)
end

function configure_ignored_categories (n, l, w)
  -- Opens a dialog allowing the user to configure specific categories to ignore.
  local choices = {}
  local defaults = {}
  -- Our choices consist of all current category / buffer names, as well as ones we've already ignored.
  for _, name in ipairs(categories) do
    choices[name] = name
  end
  for name, _ in pairs(ignored_categories) do
    choices[name] = name .. "(ignored)"
    table.insert(defaults, name)
  end
  -- There appears to be a bug with multilistbox: default selections don't show up to screenreaders. Partial fix: indicate in each item's text if it's ignored;
  -- users will have to manually re-select them, or navigate with control and go by the text rather than the reported selection status of previously ignored items.
  title = "Configure which history categories to ignore"
  message = "Please select the categories you wish to ignore. Messages to any of these will not be saved, and the category will not appear when navigating through buffers. Make sure to re-select any already ignored items if you still want to ignore them."
  local res = utils.multilistbox(message, title, choices, defaults)
  if res == nil then
    -- User made no selections.
    return
  end
  local nr = {}
  -- Operate on selections - ignoring and unignoring.
  for r, _ in pairs(res) do
    nr[r] = true
  end
  for name, _ in pairs(choices) do
    if nr[name] == nil and ignored_categories[name] ~= nil then
      -- This category wasn't selected, and is currently ignored - unignore it.
      unignore_category(name)
    elseif nr[name] ~= nil and ignored_categories[name] == nil then
      -- This category was selected by the user, and it isn't ignored currently - ignore it.
      ignore_category(name)
    end
  end
end


function ignore_category(name)
  ignored_categories[name] = true
  messages[name] = nil -- delete this category buffer's messages
  indices[name] = nil -- delete the user's position in this category buffer
  -- Find out the index of the category we're removing.
  local index = 0
  for i, n in ipairs(categories) do
    if n == name then
      index = i -- found it
      break
    end
  end
  if index > 0 then -- in case we're told to ignore a non-existent category
    table.remove(categories, index)
  end
  if current_category > #categories then
    current_category = 1
  end
end

function unignore_category(name)
  ignored_categories[name] = nil
end

function toggle_save_history(n, l, w)
  local state = GetVariable("save_messages")
  if not state or state == "false" then
    SetVariable("save_messages", "true")
    Note("The last " .. GetVariable("save_limit") .. " messages in all history buffers will now be saved and re-loaded.")
  else
    SetVariable("save_messages", "false")
    DeleteVariable("saved_messages") -- Clear saved messages
    Note("Saving of last " .. GetVariable("save_limit") .. " messages from history buffers disabled.")
  end
end
function history_catsearch(name, line, wc)
  if #categories == 0 then
    say("no categories")
    return
  end
  command=GetCommand()
  if #command~=0 then
    local possibles={}
    for k, v in ipairs(categories) do
      if v:sub(1,#command)==command or v:find("%f[^/]"..command,1) then
        table.insert(possibles, v)
      end
    end
    local selected=0
    local what
    if #possibles>1 then
      what=Menu(table.concat(possibles,"|"))
    elseif #possibles==1 then
      what=possibles[1];
    else
      say("nothing found")
      return
    end
    for k, v in ipairs(categories) do
      if v==what then
        selected=k
        break
      end
    end
    if selected==0 then
      say("nothing found")
    else
      prev_category=current_category
      current_category=selected
      SetCommandSelection(1,#GetCommand())
      PasteCommand("")
    end
  else -- nothing in input field
    if prev_category~=0 then
      local temp=current_category
      current_category=prev_category
      prev_category=temp
    else
      say("No previous jump available")
    end
  end
  if current_category==0 then current_category=1 end
  if indices[categories[current_category]]==0 then indices[categories[current_category]]=1 end
  if #messages[categories[current_category]] > 1 then
    pos_or_status = indices[categories[current_category]] .. " of " .. #messages[categories[current_category]]
  else
    pos_or_status = "empty"
  end
  say(categories[current_category] ..": " .. pos_or_status)
end

function history_find(next)
  if #categories == 0 then
    say("no categories")
    return
  end
  if current_category==0 then
    say("no category selected")
    return
  elseif #messages[categories[current_category]] == 0 then
    say("No messages in this category.")
    return
  end
  if not next then next=1 end
  if indices[categories[current_category]]==0 then indices[categories[current_category]]=1 end
  local search=indices[categories[current_category]]
  local move=1
  if next==0 then move=-1 end
  command=GetCommand()
  if #command~=0 then
    current_search=command
  end
  if current_search == "" then
    say("No search query.")
    return
  end
  search=search+move
  while search~=0 and search~=#messages[categories[current_category]]+1 do
    str=messages[categories[current_category]][search]["message"]
    if string.find(str,current_search,1,true) then
      sayMsg("",messages[categories[current_category]][search])
      if GetVariable("tts")=="1" then
        Execute("tts_note "..search.." of "..#messages[categories[current_category]])
      end
      indices[categories[current_category]]=search
      if #command~=0 then
        SetCommandSelection(1,#GetCommand())
        PasteCommand("")
      end
      break
    end
    search=search+move
  end
  if search==0 or search==#messages[categories[current_category]]+1 then
    say("not found")
  end
end
]]>
</script>
</muclient>
